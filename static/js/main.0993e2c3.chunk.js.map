{"version":3,"sources":["components/WordCount.jsx","components/ContentOutput.jsx","components/DownloadButton.jsx","views/EditorView.jsx","App.js","index.js"],"names":["WordCount","props","wordCount","text","split","reduce","total","word","length","push","getWordCount","textContent","replace","react_default","a","createElement","className","concat","ContentOutput","writeRef","useRef","useEffect","_ref","element","current","scrollTop","scrollHeight","resetScrollEffect","ref","DownloadButton","downloader","React","createRef","Fragment","onClick","click","href","encodeURIComponent","download","fileName","EditorView","_useState","useState","_useState2","Object","slicedToArray","content","setContent","_useState3","_useState4","setFileName","localStorage","window","handleKeystroke","e","key","altKey","ctrlKey","metaKey","preventDefault","deleteCharacter","test","addCharacter","getItem","document","addEventListener","removeEventListener","newContent","setItem","substring","handleClick","target","dataset","filename","navItems","i","data-filename","getNav","App","EditorView_EditorView","ReactDOM","render","src_App","getElementById"],"mappings":"0NAeA,SAASA,EAAUC,GACjB,IACMC,EAVR,SAAsBC,GACpB,OAAOA,EAAKC,MAAM,KAAKC,OAAO,SAACC,EAAOC,GACpC,OAAKA,EAAKC,QACVF,EAAMG,KAAKF,GACJD,GAFkBA,GAGxB,IAAIE,OAKWE,CAD2BT,EAAMU,YAZvCC,QADa,iDACa,KActC,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,GAAAC,OAA8Bf,EAA9B,WChBT,SAASgB,EAAcjB,GACrB,IAAMkB,EAAWC,iBAAO,MAQxB,OAFAC,oBAAU,kBAJgB,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAC3BA,EAAQC,QAAQC,UAAYF,EAAQC,QAAQE,aAG9BC,CAAkB,CAAEJ,QAASJ,MAG3CN,EAAAC,EAAAC,cAAA,OAAKa,IAAKT,EAAUH,UAAU,iBAC3Bf,EAAMU,aCXb,SAASkB,EAAe5B,GACtB,IAAM6B,EAAaC,IAAMC,YAYzB,OACEnB,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACEpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBkB,QAZ1C,WACMjC,EAAMU,YAAYH,OAAS,GAM/BsB,EAAWN,QAAQW,UAKjB,iBAGAtB,EAAAC,EAAAC,cAAA,KACEqB,KAAI,kCAAAnB,OAAoCoB,mBACtCpC,EAAMU,cAER2B,SAAUrC,EAAMsC,SAChBX,IAAKE,KChBb,SAASU,EAAWvC,GAAO,IAAAwC,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACTI,EADSJ,EAAA,GAAAK,EAEON,mBAASzC,EAAMsC,UAFtBU,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElBT,EAFkBU,EAAA,GAERC,EAFQD,EAAA,GAInBE,EAAeC,OAAOD,aAc5B,SAASE,EAAgBC,GACvB,IAAIC,EAAMD,EAAEC,IAEZ,GAAmB,IAAfA,EAAI/C,QAAiB8C,EAAEE,QAAWF,EAAEG,SAAYH,EAAEI,QAKpD,OAAQH,GACN,IAAK,YACHD,EAAEK,iBACFC,IACA,MACF,IAAK,QACHN,EAAEK,qBAVF,uCAAuCE,KAAKN,IAC9CO,EAAaP,GAjBnBlC,oBAAU,WACR0B,EAAWI,EAAaY,QAAb,OAAA9C,OAA4BsB,KAAe,MAGxDlB,oBAAU,WAGR,OAFA2C,SAASC,iBAAiB,UAAWZ,GAE9B,WACLW,SAASE,oBAAoB,UAAWb,MA0B5C,IAAMS,EAAe,SAACP,GACpB,IAAMY,EAAarB,EAAUS,EAC7BR,EAAWoB,GACXhB,EAAaiB,QAAb,OAAAnD,OAA4BsB,GAAY4B,IAGpCP,EAAkB,WACtB,IAAMO,EAAarB,EAAQuB,UAAU,EAAGvB,EAAQtC,OAAS,GACzDuC,EAAWoB,GACXhB,EAAaiB,QAAb,OAAAnD,OAA4BsB,GAAY4B,IAG1C,SAASG,EAAYhB,GACnBJ,EAAYI,EAAEiB,OAAOC,QAAQC,UAsB/B,OACE5D,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,cAvBR,WAGE,IAFA,IAAM0D,EAAW,GAERC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASjE,KACPI,EAAAC,EAAAC,cAAA,QACEwC,IAAKoB,EACLC,gBAAA,OAAA3D,OAAsB0D,GACtB3D,UAAWuB,IAAQ,OAAAtB,OAAY0D,GAAM,SAAW,GAChDzC,QAASoC,GAJX,QAAArD,OAMW0D,KAKf,OAAO9D,EAAAC,EAAAC,cAAA,WAAM2D,GAQNG,IAEHhE,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACf,EAAD,CAAWW,YAAamC,IACxBjC,EAAAC,EAAAC,cAACG,EAAD,CAAeP,YAAamC,IAC5BjC,EAAAC,EAAAC,cAACc,EAAD,CAAgBU,SAAUA,EAAU5B,YAAamC,aCrF5CgC,MAJf,WACE,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,CAAYxC,SAAU,WCF/ByC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASlB,SAASmB,eAAe","file":"static/js/main.0993e2c3.chunk.js","sourcesContent":["import React from 'react'\n\nfunction clearPunctuation(text) {\n  const punctuationRegex = /[.,?!'’\"\"“”\\\\/<>;:]\\[\\]{}_=+-]/g\n  return text.replace(punctuationRegex, '')\n}\n\nfunction getWordCount(text) {\n  return text.split(' ').reduce((total, word) => {\n    if (!word.length) return total\n    total.push(word)\n    return total\n  }, []).length\n}\n\nfunction WordCount(props) {\n  const punctuationFreeText = clearPunctuation(props.textContent)\n  const wordCount = getWordCount(punctuationFreeText)\n  return <p className=\"word-count\">{`${wordCount} words`}</p>\n}\n\nexport { WordCount }\n","import React, { useEffect, useRef } from 'react'\n\nfunction ContentOutput(props) {\n  const writeRef = useRef(null)\n\n  const resetScrollEffect = ({ element }) => {\n    element.current.scrollTop = element.current.scrollHeight\n  }\n\n  useEffect(() => resetScrollEffect({ element: writeRef }))\n\n  return (\n    <div ref={writeRef} className=\"writable-area\">\n      {props.textContent}\n    </div>\n  )\n}\n\nexport { ContentOutput }\n","import React from 'react'\n\nfunction DownloadButton(props) {\n  const downloader = React.createRef()\n\n  function handleClick() {\n    if (props.textContent.length > 0) {\n      triggerDownload()\n    }\n  }\n\n  function triggerDownload() {\n    downloader.current.click()\n  }\n\n  return (\n    <React.Fragment>\n      <button className=\"downloader-button\" onClick={handleClick}>\n        Download File\n      </button>\n      <a\n        href={`data:text/plain;charset=utf-8, ${encodeURIComponent(\n          props.textContent\n        )}`}\n        download={props.fileName}\n        ref={downloader}\n      ></a>\n    </React.Fragment>\n  )\n}\n\nexport { DownloadButton }\n","import React, { useState, useEffect } from 'react'\n\nimport '../static/css/EditorView.css'\n\nimport { WordCount } from '../components/WordCount'\nimport { ContentOutput } from '../components/ContentOutput'\nimport { DownloadButton } from '../components/DownloadButton'\n\n// TODO: Cleanup, implement the return character, deliberate user input strategy\nfunction EditorView(props) {\n  const [content, setContent] = useState('')\n  const [fileName, setFileName] = useState(props.fileName)\n\n  const localStorage = window.localStorage\n\n  useEffect(() => {\n    setContent(localStorage.getItem(`_jd_${fileName}`) || '')\n  })\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeystroke)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeystroke)\n    }\n  })\n\n  function handleKeystroke(e) {\n    let key = e.key\n\n    if (key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n      if (/[a-zA-z0-9.,/#!$%^&*;:{}=\\-_`~()@\\W]/.test(key)) {\n        addCharacter(key)\n      }\n    } else {\n      switch (key) {\n        case 'Backspace':\n          e.preventDefault()\n          deleteCharacter()\n          break\n        case 'Enter':\n          e.preventDefault()\n          // this.newParagraph()\n          break\n        default:\n      }\n    }\n  }\n\n  const addCharacter = (key) => {\n    const newContent = content + key\n    setContent(newContent)\n    localStorage.setItem(`_jd_${fileName}`, newContent)\n  }\n\n  const deleteCharacter = () => {\n    const newContent = content.substring(0, content.length - 1)\n    setContent(newContent)\n    localStorage.setItem(`_jd_${fileName}`, newContent)\n  }\n\n  function handleClick(e) {\n    setFileName(e.target.dataset.filename)\n  }\n\n  function getNav() {\n    const navItems = []\n\n    for (let i = 1; i < 6; i++) {\n      navItems.push(\n        <span\n          key={i}\n          data-filename={`file${i}`}\n          className={fileName === `file${i}` ? 'active' : ''}\n          onClick={handleClick}\n        >\n          {`File ${i}`}\n        </span>\n      )\n    }\n\n    return <nav>{navItems}</nav>\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"EditorView\">\n        <header>\n          <div className=\"app-title\">Just Draft</div>\n          {getNav()}\n        </header>\n        <main>\n          <WordCount textContent={content} />\n          <ContentOutput textContent={content} />\n          <DownloadButton fileName={fileName} textContent={content} />\n        </main>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport { EditorView }\n","import React from 'react'\nimport { EditorView } from './views/EditorView'\n\nimport './static/css/App.css'\n\nfunction App() {\n  return <EditorView fileName={'file1'} />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}